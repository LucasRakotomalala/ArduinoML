package ArduinoML.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;

public class Sensor_Constraints extends BaseConstraintsDescriptor {
  public Sensor_Constraints() {
    super(CONCEPTS.Sensor$IZ);
  }

  public static class Mode_Property extends BasePropertyConstraintsDescriptor {
    public Mode_Property(ConstraintsDescriptor container) {
      super(PROPS.mode$cRPF, container, true, false, false);
    }
    @Override
    public Object getValue(SNode node) {
      return SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x2e3cba7b50844845L, 0xb5f42a0a99894ccaL, 0x2733efd2a313b10bL, "ArduinoML.structure.MODE"), 0x2733efd2a31e433cL, "INPUT_PULLUP");
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.mode$cRPF, new Mode_Property(this));
    return properties;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Sensor$IZ = MetaAdapterFactory.getConcept(0x2e3cba7b50844845L, 0xb5f42a0a99894ccaL, 0x4fb6b2583ddb3be6L, "ArduinoML.structure.Sensor");
  }

  private static final class PROPS {
    /*package*/ static final SProperty mode$cRPF = MetaAdapterFactory.getProperty(0x2e3cba7b50844845L, 0xb5f42a0a99894ccaL, 0x4fb6b2583ddab707L, 0x4fb6b2583ddab758L, "mode");
  }
}
